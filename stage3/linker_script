OUTPUT_FORMAT("elf64-x86-64")

ENTRY(_start)

SECTIONS
{
    . = 0;
    AP_BOOT_PAGE = .;

    . = 0xffffffff80000000;
    START = .;

    .start ALIGN(4096):
    {
        *(.start)
    }

    /* the default linker aligns the file and text without throwing
       away a page..but for today...*/
    text_start = .;
    .text : ALIGN(4096)
    {
        *(.text)
        *(.text.*)
        . = ALIGN(4096);
        vsyscall_start = .;
        *(.vsyscall)        /* must be at end of section; we use text_end to determine its extent */
        vsyscall_end = .;
    }
    text_end = .;

    /* All kernel variables accessible to userspace
     * Offsets from vvar_page must match the corresponding offsets specified
     * in src/x86_64/vdso.lds
     *
     * We could look at generating them automatically, but for now it's easy enough
     * to do it this way
     */
    .vvar : ALIGN(4096)
    {
        vvar_page = .; 
        __vdso_vdso_dat = vvar_page + 128;
    }

    .rodata : ALIGN(4096)
    {
        *(.rodata)
        *(.rodata.*)
    }

    .data : ALIGN(4096)
    {
        *(.data)
        *(.data.*)
    }

    PROVIDE(bss_start = .);
    .bss  ALIGN(32):
    {
        *(.bss)
        *(.bss.*)
        *(COMMON)
    }
    PROVIDE(bss_end = .);
}
