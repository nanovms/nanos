Memory Layout and Usage in the Nanos Kernel

Aside from the fixed kernel image at 0xffffffff80000000 and any loaded
ELF segments with fixed addresses (e.g. non-PIE / loader), Nanos
generally uses instances of a number of allocators, known as "heaps",
to carve out areas of virtual and physical address space. Allocations
of unmapped address space typically come from instances of the id
heap, such as physical, virtual_huge (for 2^32-sized allocations) and
virtual_page (for pages). Large sections of virtual address space (in
2^32 byte units) are allocated from virtual_huge, usually indirectly
via the virtual_page child heap, which has a 4k base allocation size.

For more information about the types of heaps used in the kernel, see
src/runtime/kernel_heaps.h.

Stage 1/2 Memory Layout
-----------------------
- 32-bit address space is directly mapped

- The stack and initial page heap are allocated from physical memory
  (while remaining within 32-bit space) using the region
  allocator. The location of these areas depend on the physical memory
  extents provided by the BIOS e820 call. Note that the region
  allocator actually shrinks the region from which the allocation was
  made. This is how stage3 is able to avoid clashing with allocations
  made in stage2.

low mem (dismantled in stage3):

0x0000..0x03ff real mode IDT

0x0400..0x04ff BDA (BIOS data area)

0x0500..0x6bff bios_read_sectors() buffer

0x6c00..0x7dff stage2 real mode stack

0x7c00..0x7dff MBR (stage1)

0x7e00..0x7fff unused

0x8000..       service32.s:_start, stage2, 16/32 GDT, GDT64, transition to 64-bit

- Upon entering stage3, page tables are enabled and GDT64 is moved
  into kernel data space. The initial map (0x0000 - 0xa000) and stage2
  stack are unmapped and physical pages are reclaimed.

Stage 3 Memory Usage
--------------------

  ffffffffc0000000    PAGES_BASE - page table memory mapped here

  ffffffff80000000    KERNEL_BASE - kernel image mapped here

  ffffffff00000000    KMEM_LIMIT - top of kernel heap memory

  ffff800000000000    KMEM_BASE - base of tagged kernel heap memory
                      (and high canonical addresses)

  00007fffffffffff    end of user memory and low canonical addresses

  0000100000000000    end of mmap allocations, though fixed mappings
                      can exist above (to accomodate tagged regions
                      for user programs using nanos runtime)

  0000000100000000    base of non-MAP_32BIT allocations

  0000000080000000    base of MAP_32BIT allocations

  000000007e000000    typical user stack allocation on exec; may vary
                      with ASLR usage

  0000000000001000    memory available for user program

  0000000000000000    unmapped zero page, to trigger a fault on null
                      pointer dereferences

Tagged Memory
-------------

Built explicitly for 64-bit platforms, Nanos makes use of large
virtual address space by encoding type information into kernel memory
addresses. This adds type introspection to the kernel for use
programmatically as well as for external access to the kernel meta
store, e.g. for management of configuration, counter collection,
monitoring and debugging of live instances.

An 8-bit tag, representing a kernel object type, is encoded in the
address at bit offset VA_TAG_OFFSET. Tagged memory begins at
KMEM_BASE.

e.g.

  base address        tag
  ------------        ---

  ffffff8000000000    0xff, containing kernel and pages

  ffff808000000000    0x01

  ffffbf8000000000    0x7f
